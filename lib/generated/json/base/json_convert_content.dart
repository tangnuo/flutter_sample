// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter_sample/arch/net/base_http_result.dart';
import 'package:flutter_sample/generated/json/base_http_result_helper.dart';
import 'package:flutter_sample/arch/model/dict_model.dart';
import 'package:flutter_sample/generated/json/dict_model_helper.dart';
import 'package:flutter_sample/arch/model/org_model.dart';
import 'package:flutter_sample/generated/json/org_model_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {
			case BaseHttpResult:
				return baseHttpResultFromJson(data as BaseHttpResult, json) as T;
			case BaseHttpResultResult:
				return baseHttpResultResultFromJson(data as BaseHttpResultResult, json) as T;
			case DictModel:
				return dictModelFromJson(data as DictModel, json) as T;
			case OrgModel:
				return orgModelFromJson(data as OrgModel, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case BaseHttpResult:
				return baseHttpResultToJson(data as BaseHttpResult);
			case BaseHttpResultResult:
				return baseHttpResultResultToJson(data as BaseHttpResultResult);
			case DictModel:
				return dictModelToJson(data as DictModel);
			case OrgModel:
				return orgModelToJson(data as OrgModel);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (BaseHttpResult).toString()){
			return BaseHttpResult().fromJson(json);
		}	else if(type == (BaseHttpResultResult).toString()){
			return BaseHttpResultResult().fromJson(json);
		}	else if(type == (DictModel).toString()){
			return DictModel().fromJson(json);
		}	else if(type == (OrgModel).toString()){
			return OrgModel().fromJson(json);
		}	
		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<BaseHttpResult>[] is M){
			return data.map<BaseHttpResult>((e) => BaseHttpResult().fromJson(e)).toList() as M;
		}	else if(<BaseHttpResultResult>[] is M){
			return data.map<BaseHttpResultResult>((e) => BaseHttpResultResult().fromJson(e)).toList() as M;
		}	else if(<DictModel>[] is M){
			return data.map<DictModel>((e) => DictModel().fromJson(e)).toList() as M;
		}	else if(<OrgModel>[] is M){
			return data.map<OrgModel>((e) => OrgModel().fromJson(e)).toList() as M;
		}
		throw Exception("not fond");
	}

  static M fromJsonAsT<M>(json) {
    if (json is List) {
      return _getListChildType<M>(json);
    } else {
      return _fromJsonSingle<M>(json) as M;
    }
  }
}